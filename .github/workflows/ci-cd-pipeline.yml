name: EntryTracker Production CI/CD Pipeline (GHCR)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: entrytracker

jobs:
  ci-cd-pipeline:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate image tag
      id: generate-tag
      run: |
        TAG="build-$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Generated tag: ${TAG}"

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Build and push EntryTracker image
      run: |
        TAG="${{ steps.generate-tag.outputs.tag }}"
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_NAME="${{ env.REGISTRY }}/${REPO_OWNER_LOWER}/${{ env.IMAGE_NAME }}"

        docker build -t ${IMAGE_NAME}:${TAG} .
        docker tag ${IMAGE_NAME}:${TAG} ${IMAGE_NAME}:latest

        docker push ${IMAGE_NAME}:${TAG}
        docker push ${IMAGE_NAME}:latest

    - name: Create kind cluster for testing
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
        kind create cluster --wait 300s
        kubectl cluster-info
        kubectl get nodes

    - name: Deploy MySQL infrastructure
      run: |
        kubectl apply -f k8s/mysql-secret.yaml
        kubectl apply -f k8s/mysql-statefulset.yaml
        kubectl apply -f k8s/mysql-service.yaml
        kubectl wait --for=condition=ready pod/mysql-0 --timeout=300s

    - name: Deploy EntryTracker application
      run: |
        TAG="${{ steps.generate-tag.outputs.tag }}"
        REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        IMAGE="ghcr.io/${REPO_OWNER_LOWER}/entrytracker:${TAG}"

        sed -i "s|IMAGE_PLACEHOLDER|${IMAGE}|g" k8s/entrytracker-deployment.yaml

        kubectl apply -f k8s/entrytracker-configmap.yaml
        kubectl apply -f k8s/entrytracker-deployment.yaml
        kubectl apply -f k8s/entrytracker-service.yaml

        kubectl wait --for=condition=available deployment/entrytracker --timeout=300s
        kubectl wait --for=condition=ready pod -l app=entrytracker --timeout=300s

    - name: Verify production-ready stack
      run: |
        kubectl get all
        kubectl get secrets,configmaps

        kubectl run mysql-client --image=mysql:5.7 -it --rm --restart=Never -- \
          mysql -h mysql-service -u app_user -papp_password -D entrytracker_db -e "SHOW DATABASES;"

        kubectl describe statefulset mysql
        kubectl get pvc

        kubectl port-forward deployment/entrytracker 5000:5000 &
        PORT_FORWARD_PID=$!
        sleep 20

        if curl -f http://localhost:5000/; then
          echo "EntryTracker application: SUCCESS"
        else
          echo "Application failed"
          exit 1
        fi

        kill $PORT_FORWARD_PID

        kubectl describe pod -l app=entrytracker | grep -A 5 "Limits:"
        kubectl describe pod mysql-0 | grep -A 5 "Limits:"
